// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthorizedUpdated extends ethereum.Event {
  get params(): AuthorizedUpdated__Params {
    return new AuthorizedUpdated__Params(this);
  }
}

export class AuthorizedUpdated__Params {
  _event: AuthorizedUpdated;

  constructor(event: AuthorizedUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorized(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class BackendWalletUpdated extends ethereum.Event {
  get params(): BackendWalletUpdated__Params {
    return new BackendWalletUpdated__Params(this);
  }
}

export class BackendWalletUpdated__Params {
  _event: BackendWalletUpdated;

  constructor(event: BackendWalletUpdated) {
    this._event = event;
  }

  get oldWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ContractFunded extends ethereum.Event {
  get params(): ContractFunded__Params {
    return new ContractFunded__Params(this);
  }
}

export class ContractFunded__Params {
  _event: ContractFunded;

  constructor(event: ContractFunded) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinimumStakeUpdated extends ethereum.Event {
  get params(): MinimumStakeUpdated__Params {
    return new MinimumStakeUpdated__Params(this);
  }
}

export class MinimumStakeUpdated__Params {
  _event: MinimumStakeUpdated;

  constructor(event: MinimumStakeUpdated) {
    this._event = event;
  }

  get oldMinimum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMinimum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TipsAllocated extends ethereum.Event {
  get params(): TipsAllocated__Params {
    return new TipsAllocated__Params(this);
  }
}

export class TipsAllocated__Params {
  _event: TipsAllocated;

  constructor(event: TipsAllocated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TipsClaimed extends ethereum.Event {
  get params(): TipsClaimed__Params {
    return new TipsClaimed__Params(this);
  }
}

export class TipsClaimed__Params {
  _event: TipsClaimed;

  constructor(event: TipsClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get action(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SteakNStake__getContractStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTotalStaked_(): BigInt {
    return this.value0;
  }

  getTotalAllocated_(): BigInt {
    return this.value1;
  }

  getTotalClaimed_(): BigInt {
    return this.value2;
  }

  getContractBalance(): BigInt {
    return this.value3;
  }
}

export class SteakNStake__getUserStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStaked(): BigInt {
    return this.value0;
  }

  getClaimableTips(): BigInt {
    return this.value1;
  }

  getTotalTipsReceived_(): BigInt {
    return this.value2;
  }

  getLifetimeStaked_(): BigInt {
    return this.value3;
  }

  getStakeTimestamp(): BigInt {
    return this.value4;
  }
}

export class SteakNStake extends ethereum.SmartContract {
  static bind(address: Address): SteakNStake {
    return new SteakNStake("SteakNStake", address);
  }

  allocatedTips(param0: Address): BigInt {
    let result = super.call(
      "allocatedTips",
      "allocatedTips(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_allocatedTips(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocatedTips",
      "allocatedTips(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorized(param0: Address): boolean {
    let result = super.call("authorized", "authorized(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_authorized(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("authorized", "authorized(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  backendWallet(): Address {
    let result = super.call("backendWallet", "backendWallet():(address)", []);

    return result[0].toAddress();
  }

  try_backendWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "backendWallet",
      "backendWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimedTips(param0: Address): BigInt {
    let result = super.call("claimedTips", "claimedTips(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_claimedTips(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimedTips",
      "claimedTips(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimableAmount(user: Address): BigInt {
    let result = super.call(
      "getClaimableAmount",
      "getClaimableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getClaimableAmount(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimableAmount",
      "getClaimableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractStats(): SteakNStake__getContractStatsResult {
    let result = super.call(
      "getContractStats",
      "getContractStats():(uint256,uint256,uint256,uint256)",
      []
    );

    return new SteakNStake__getContractStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getContractStats(): ethereum.CallResult<
    SteakNStake__getContractStatsResult
  > {
    let result = super.tryCall(
      "getContractStats",
      "getContractStats():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SteakNStake__getContractStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getStakeTimestamp(user: Address): BigInt {
    let result = super.call(
      "getStakeTimestamp",
      "getStakeTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getStakeTimestamp(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakeTimestamp",
      "getStakeTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakedAmount(user: Address): BigInt {
    let result = super.call(
      "getStakedAmount",
      "getStakedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getStakedAmount(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakedAmount",
      "getStakedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserStats(user: Address): SteakNStake__getUserStatsResult {
    let result = super.call(
      "getUserStats",
      "getUserStats(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new SteakNStake__getUserStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getUserStats(
    user: Address
  ): ethereum.CallResult<SteakNStake__getUserStatsResult> {
    let result = super.tryCall(
      "getUserStats",
      "getUserStats(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SteakNStake__getUserStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  lifetimeStaked(param0: Address): BigInt {
    let result = super.call(
      "lifetimeStaked",
      "lifetimeStaked(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lifetimeStaked(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lifetimeStaked",
      "lifetimeStaked(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumStake(): BigInt {
    let result = super.call("minimumStake", "minimumStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minimumStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minimumStake", "minimumStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakeTimestamps(param0: Address): BigInt {
    let result = super.call(
      "stakeTimestamps",
      "stakeTimestamps(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakeTimestamps(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeTimestamps",
      "stakeTimestamps(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedAmounts(param0: Address): BigInt {
    let result = super.call(
      "stakedAmounts",
      "stakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedAmounts",
      "stakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  steakToken(): Address {
    let result = super.call("steakToken", "steakToken():(address)", []);

    return result[0].toAddress();
  }

  try_steakToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("steakToken", "steakToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAllocated(): BigInt {
    let result = super.call("totalAllocated", "totalAllocated():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAllocated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocated",
      "totalAllocated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalClaimed(): BigInt {
    let result = super.call("totalClaimed", "totalClaimed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalClaimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalClaimed", "totalClaimed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTipsReceived(param0: Address): BigInt {
    let result = super.call(
      "totalTipsReceived",
      "totalTipsReceived(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalTipsReceived(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTipsReceived",
      "totalTipsReceived(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateTipsBatchCall extends ethereum.Call {
  get inputs(): AllocateTipsBatchCall__Inputs {
    return new AllocateTipsBatchCall__Inputs(this);
  }

  get outputs(): AllocateTipsBatchCall__Outputs {
    return new AllocateTipsBatchCall__Outputs(this);
  }
}

export class AllocateTipsBatchCall__Inputs {
  _call: AllocateTipsBatchCall;

  constructor(call: AllocateTipsBatchCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AllocateTipsBatchCall__Outputs {
  _call: AllocateTipsBatchCall;

  constructor(call: AllocateTipsBatchCall) {
    this._call = call;
  }
}

export class ClaimTipsCall extends ethereum.Call {
  get inputs(): ClaimTipsCall__Inputs {
    return new ClaimTipsCall__Inputs(this);
  }

  get outputs(): ClaimTipsCall__Outputs {
    return new ClaimTipsCall__Outputs(this);
  }
}

export class ClaimTipsCall__Inputs {
  _call: ClaimTipsCall;

  constructor(call: ClaimTipsCall) {
    this._call = call;
  }

  get action(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ClaimTipsCall__Outputs {
  _call: ClaimTipsCall;

  constructor(call: ClaimTipsCall) {
    this._call = call;
  }
}

export class ClaimToWalletCall extends ethereum.Call {
  get inputs(): ClaimToWalletCall__Inputs {
    return new ClaimToWalletCall__Inputs(this);
  }

  get outputs(): ClaimToWalletCall__Outputs {
    return new ClaimToWalletCall__Outputs(this);
  }
}

export class ClaimToWalletCall__Inputs {
  _call: ClaimToWalletCall;

  constructor(call: ClaimToWalletCall) {
    this._call = call;
  }
}

export class ClaimToWalletCall__Outputs {
  _call: ClaimToWalletCall;

  constructor(call: ClaimToWalletCall) {
    this._call = call;
  }
}

export class EmergencyRecoverTokensCall extends ethereum.Call {
  get inputs(): EmergencyRecoverTokensCall__Inputs {
    return new EmergencyRecoverTokensCall__Inputs(this);
  }

  get outputs(): EmergencyRecoverTokensCall__Outputs {
    return new EmergencyRecoverTokensCall__Outputs(this);
  }
}

export class EmergencyRecoverTokensCall__Inputs {
  _call: EmergencyRecoverTokensCall;

  constructor(call: EmergencyRecoverTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmergencyRecoverTokensCall__Outputs {
  _call: EmergencyRecoverTokensCall;

  constructor(call: EmergencyRecoverTokensCall) {
    this._call = call;
  }
}

export class FundContractCall extends ethereum.Call {
  get inputs(): FundContractCall__Inputs {
    return new FundContractCall__Inputs(this);
  }

  get outputs(): FundContractCall__Outputs {
    return new FundContractCall__Outputs(this);
  }
}

export class FundContractCall__Inputs {
  _call: FundContractCall;

  constructor(call: FundContractCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundContractCall__Outputs {
  _call: FundContractCall;

  constructor(call: FundContractCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _steakToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _backendWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minimumStake(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAuthorizedCall extends ethereum.Call {
  get inputs(): SetAuthorizedCall__Inputs {
    return new SetAuthorizedCall__Inputs(this);
  }

  get outputs(): SetAuthorizedCall__Outputs {
    return new SetAuthorizedCall__Outputs(this);
  }
}

export class SetAuthorizedCall__Inputs {
  _call: SetAuthorizedCall;

  constructor(call: SetAuthorizedCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _authorized(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAuthorizedCall__Outputs {
  _call: SetAuthorizedCall;

  constructor(call: SetAuthorizedCall) {
    this._call = call;
  }
}

export class SetBackendWalletCall extends ethereum.Call {
  get inputs(): SetBackendWalletCall__Inputs {
    return new SetBackendWalletCall__Inputs(this);
  }

  get outputs(): SetBackendWalletCall__Outputs {
    return new SetBackendWalletCall__Outputs(this);
  }
}

export class SetBackendWalletCall__Inputs {
  _call: SetBackendWalletCall;

  constructor(call: SetBackendWalletCall) {
    this._call = call;
  }

  get newBackendWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBackendWalletCall__Outputs {
  _call: SetBackendWalletCall;

  constructor(call: SetBackendWalletCall) {
    this._call = call;
  }
}

export class SetMinimumStakeCall extends ethereum.Call {
  get inputs(): SetMinimumStakeCall__Inputs {
    return new SetMinimumStakeCall__Inputs(this);
  }

  get outputs(): SetMinimumStakeCall__Outputs {
    return new SetMinimumStakeCall__Outputs(this);
  }
}

export class SetMinimumStakeCall__Inputs {
  _call: SetMinimumStakeCall;

  constructor(call: SetMinimumStakeCall) {
    this._call = call;
  }

  get newMinimumStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumStakeCall__Outputs {
  _call: SetMinimumStakeCall;

  constructor(call: SetMinimumStakeCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
